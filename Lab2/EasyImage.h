/* ------------------------------------------------------------------------------------------------------------------- *\
	Файл EasyImage.h

	Материалы к курсу "Программирование на языке ассемблера"

	Содержит декларацию класса EasyImage, предназначенного для упрощения работы с изображениями.
	Изображения хранятся в виде трех массивов байтов, соответствующих трем цветовым составляющим.
	Изображения хранятся построчно, от верхней строки к нижней, а пикселы в строке считаются слева направо.

	Требует включения (в stdafx.h)
	#include <Commdlg.h>

	(c) Федоров А.Р., 2011, 2012, 2013
	Разрешено свободное копирование и любое использование в той мере, в которой
	это не нарушает прав других правообладателей   
\* ------------------------------------------------------------------------------------------------------------------- */
#pragma once

/* ------------------------------------------------------------------------------------------------  *\

	Описание процесса фильтрации

	Для осуществления фильтрации метод Filtering в цикле вызывает функцию ядра фильтра таким образом,
	чтобы вычислить значение всех пикселов нового изображения. При вызове метода Filtering
	необходимо передать ему в качестве параметра дескриптор фильтра (тип FILTER_DSC)

	Новое изображение получается по размеру меньше исходного за счет того, что крайние пикселы
	исходного изображения, значение которых не может быть вычислено - отбрасываются.	
\* ------------------------------------------------------------------------------------------------- */
// Декларация типа функции - ядра фильтра
typedef void KERNEL_FUNC( PBYTE pDst, PBYTE pSrc, int Width ) ;
// pDst  - адрес вычисленного пиксела (или массива пикселов в случае параллельной обработки)
// pSrc  - адрес левого верхего пиксела в матрице пикселов исходного изображения,
//          участвующих в вычислениях
// Width - ширина картинки в пикселах
 
typedef KERNEL_FUNC* PKERNEL_FUNC ;

// Дескриптор ядра фильтра (декларация типа)
typedef struct
{
	PKERNEL_FUNC KernelFunc ; // Указатель на функцию ядра фильтра
	int	FilterMatrixHight   ; // Количество строк в матрице ядра фильтра
	int FilterMatrixWidth   ; // Количество столбцов в матрице ядра фильтра
	int PixelsAtOnce        ; // Количество пикселов, обрабатываемых функцией
                              //   KernelFunc() за одно обращение
} FILTER_DSC ;
typedef FILTER_DSC* PFILTER_DSC  ;

class EasyImage
{
public:
// Коды ошибок функций-методов
	static const int EI_Success           = 0 ; // Без ошибок
	static const int EI_OpenFileError     = 1 ; // Не открыть файл, указанный в методах Load или Store
	static const int EI_WrongFileFormat   = 2 ; // Попытка открыть файл не .bmp или данный формат не поддерживается
//  Публичные члены класса
	long long CalcTime ; // Время выполнения последней операции фильтрации в time stamps или 0, если фильтрации не было
	RECT ActualRect    ; // Реальная область отображения

//  Конструктор и деструктор по умолчанию
	inline EasyImage(void) : pRed(NULL), pGreen(NULL), pBlue(NULL), eiWidth(0), eiHight(0), CalcTime(0) {}
	inline ~EasyImage(void) 
	{
		if ( NULL != pRed   ) delete pRed  ;
		if ( NULL != pGreen ) delete pGreen ;
		if ( NULL != pBlue  ) delete pBlue  ;
	}

//  функции работы с bitmap
	// Создать пустой массив пискелов
	int Create( int Width, int Hight) ;

	// Очистить массив пикселов
	void Clear( void ) ;

	// Загрузить файл .bmp и создать на основе его bitmap
	int Load  ( LPCTSTR FileName    ) ;

	// Ввести имя файла в стандартное окно диалога и загрузить выбранный .bmp
	int OpenDlg( HINSTANCE hInst, HWND hWnd ) ;

	// Отобразить bitmap в прямоугольник rect. Левые верхние углы bitmap и rect совмещаются.
	//   Часть bitmap, не поместившаяся в rect, отбрасывается
	//   Если bitmap не загружен функциями Load() или OpenDlg(), то ничего не отображается
	void   View(HDC hdc, RECT rect, BOOL TimeView = FALSE );

	// Возвращает ширину (горизонтальный размер) массива пикселов
	inline int Width( void ) { return eiWidth ; } 

	// Возвращает высоту (вертикальный размер) массива пикселов
	inline int Hight( void ) { return eiHight ; }

	// Копирование массива пикселов
	EasyImage& operator=( EasyImage& a ) ;

	// Фильтрация изображения
	//   Возвращает время исполнения в Time Stamps деленное на количество пикселов
	// Первый параметр (Src) - исходное изображение. Из него с помощью линейного фильтра
	//   будет получено изображение которое помещается в текущий экземпляр класса (this).
	// Второй параметр (Filter) - дескриптор фильтра
	long long Filtering( EasyImage& Src, FILTER_DSC& Filter ) ;

private:
	PBYTE pRed, pGreen, pBlue ; // Указатели на матрицы цветовых составляющих
	int  eiWidth ; // Ширина bitmap
	int  eiHight ; // Высота bitmap
};
